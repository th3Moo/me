[
  {
    "path": "requirements.txt",
    "content": "django\ndjangorestframework\ndjangorestframework-simplejwt\ndjango-cors-headers\nrequests\npython-dotenv\npsycopg2-binary"
  },
  {
    "path": "manage.py",
    "content": "#!/usr/bin/env python\n\"\"\"Django's command-line utility for administrative tasks.\"\"\"\nimport os\nimport sys\n\ndef main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'super_app.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()\n"
  },
  {
    "path": "super_app/__init__.py",
    "content": ""
  },
  {
    "path": "super_app/settings.py",
    "content": "import os\nfrom pathlib import Path\nfrom datetime import timedelta\n\nBASE_DIR = Path(__file__).resolve().parent.parent\n\nSECRET_KEY = os.environ.get('DJANGO_SECRET_KEY', 'django-insecure-fallback-key-for-dev')\n\nDEBUG = os.environ.get('DJANGO_DEBUG', 'True') == 'True'\n\nALLOWED_HOSTS = ['*']\n\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    \n    'rest_framework',\n    'rest_framework_simplejwt',\n    'corsheaders',\n\n    'apps.users',\n    'apps.wallets',\n    'apps.gaming',\n    'apps.cashier',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'corsheaders.middleware.CorsMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'super_app.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'super_app.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n\nAUTH_USER_MODEL = 'users.User'\n\nAUTH_PASSWORD_VALIDATORS = [\n    {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator'},\n    {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator'},\n    {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator'},\n    {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator'},\n]\n\nLANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n\nSTATIC_URL = 'static/'\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n\nCORS_ALLOW_ALL_ORIGINS = True\n\nREST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': (\n        'rest_framework_simplejwt.authentication.JWTAuthentication',\n    ),\n    'DEFAULT_PERMISSION_CLASSES': (\n        'rest_framework.permissions.IsAuthenticated',\n    ),\n    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',\n    'PAGE_SIZE': 20\n}\n\nSIMPLE_JWT = {\n    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=60),\n    'REFRESH_TOKEN_LIFETIME': timedelta(days=7),\n    'ROTATE_REFRESH_TOKENS': True,\n    'USER_ID_FIELD': 'id',\n    'USER_ID_CLAIM': 'user_id',\n}\n"
  },
  {
    "path": "super_app/urls.py",
    "content": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('api/auth/', include('apps.users.urls')),\n    path('api/', include('apps.wallets.urls')),\n    path('api/', include('apps.gaming.urls')),\n    path('api/', include('apps.cashier.urls')),\n]\n"
  },
  {
    "path": "apps/users/apps.py",
    "content": "from django.apps import AppConfig\n\nclass UsersConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'apps.users'\n\n    def ready(self):\n        import apps.users.signals"
  },
  {
    "path": "apps/users/models.py",
    "content": "import uuid\nfrom django.db import models\nfrom django.contrib.auth.models import AbstractUser\n\nclass User(AbstractUser):\n    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n    phone_number = models.CharField(max_length=20, blank=True, null=True)\n    date_of_birth = models.DateField(blank=True, null=True)\n\n    def __str__(self):\n        return self.username\n"
  },
  {
    "path": "apps/users/serializers.py",
    "content": "from rest_framework import serializers\nfrom .models import User\n\nclass UserRegistrationSerializer(serializers.ModelSerializer):\n    password = serializers.CharField(write_only=True, required=True, style={'input_type': 'password'})\n\n    class Meta:\n        model = User\n        fields = ('username', 'email', 'password', 'first_name', 'last_name')\n\n    def create(self, validated_data):\n        user = User.objects.create_user(\n            username=validated_data['username'],\n            email=validated_data['email'],\n            password=validated_data['password'],\n            first_name=validated_data.get('first_name', ''),\n            last_name=validated_data.get('last_name', '')\n        )\n        return user\n\nclass UserProfileSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = User\n        fields = ('id', 'username', 'email', 'first_name', 'last_name', 'phone_number', 'date_of_birth')\n        read_only_fields = ('id', 'username', 'email')\n"
  },
  {
    "path": "apps/users/views.py",
    "content": "from rest_framework import generics, permissions\nfrom rest_framework_simplejwt.views import TokenObtainPairView, TokenRefreshView\nfrom .serializers import UserRegistrationSerializer, UserProfileSerializer\nfrom .models import User\n\nclass RegisterView(generics.CreateAPIView):\n    queryset = User.objects.all()\n    permission_classes = (permissions.AllowAny,)\n    serializer_class = UserRegistrationSerializer\n\nclass ProfileView(generics.RetrieveUpdateAPIView):\n    queryset = User.objects.all()\n    serializer_class = UserProfileSerializer\n    permission_classes = (permissions.IsAuthenticated,)\n\n    def get_object(self):\n        return self.request.user\n\n# Expose existing SimpleJWT views\nclass LoginView(TokenObtainPairView):\n    pass\n\nclass RefreshTokenView(TokenRefreshView):\n    pass\n"
  },
  {
    "path": "apps/users/urls.py",
    "content": "from django.urls import path\nfrom .views import RegisterView, LoginView, RefreshTokenView, ProfileView\n\nurlpatterns = [\n    path('register/', RegisterView.as_view(), name='auth_register'),\n    path('login/', LoginView.as_view(), name='auth_login'),\n    path('token/refresh/', RefreshTokenView.as_view(), name='token_refresh'),\n    path('profile/', ProfileView.as_view(), name='user_profile'),\n]\n"
  },
  {
    "path": "apps/users/signals.py",
    "content": "from django.db.models.signals import post_save\nfrom django.dispatch import receiver\nfrom .models import User\nfrom apps.wallets.models import Wallet\n\n@receiver(post_save, sender=User)\ndef create_default_wallets(sender, instance, created, **kwargs):\n    if created:\n        # Create default fiat and crypto wallets for a new user\n        Wallet.objects.get_or_create(user=instance, currency='NGN', wallet_type='FIAT')\n        Wallet.objects.get_or_create(user=instance, currency='USD', wallet_type='FIAT')\n        Wallet.objects.get_or_create(user=instance, currency='ZAR', wallet_type='FIAT')\n        Wallet.objects.get_or_create(user=instance, currency='USDT', wallet_type='CRYPTO', network='TRC20')\n"
  },
  {
    "path": "apps/wallets/apps.py",
    "content": "from django.apps import AppConfig\n\n\nclass WalletsConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'apps.wallets'\n"
  },
  {
    "path": "apps/wallets/models.py",
    "content": "import uuid\nfrom django.db import models\nfrom apps.users.models import User\n\nclass Wallet(models.Model):\n    WALLET_TYPES = [('FIAT', 'Fiat'), ('CRYPTO', 'Crypto')]\n    \n    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name='wallets')\n    wallet_type = models.CharField(max_length=10, choices=WALLET_TYPES, default='FIAT')\n    currency = models.CharField(max_length=10) # e.g., 'USD', 'NGN', 'USDT'\n    network = models.CharField(max_length=20, blank=True, null=True) # e.g., 'TRC20', 'ERC20'\n    balance = models.DecimalField(max_digits=18, decimal_places=8, default=0.00)\n    address = models.CharField(max_length=255, unique=True, blank=True, null=True)\n    encrypted_private_key = models.TextField(blank=True, null=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n\n    class Meta:\n        unique_together = ('user', 'currency', 'network')\n\n    def __str__(self):\n        return f'{self.user.username} - {self.currency} ({self.network or self.wallet_type})'\n\nclass Transaction(models.Model):\n    TRANSACTION_TYPE_CHOICES = [\n        ('DEPOSIT', 'Deposit'),\n        ('WITHDRAWAL', 'Withdrawal'),\n        ('SWAP', 'Swap'),\n        ('FEE', 'Fee'),\n        ('TOP_UP', 'Gaming Top-Up')\n    ]\n    STATUS_CHOICES = [\n        ('PENDING', 'Pending'),\n        ('COMPLETED', 'Completed'),\n        ('FAILED', 'Failed'),\n        ('CANCELLED', 'Cancelled')\n    ]\n\n    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n    wallet = models.ForeignKey(Wallet, on_delete=models.PROTECT, related_name='transactions')\n    transaction_type = models.CharField(max_length=20, choices=TRANSACTION_TYPE_CHOICES)\n    amount = models.DecimalField(max_digits=18, decimal_places=8)\n    status = models.CharField(max_length=20, choices=STATUS_CHOICES, default='PENDING')\n    metadata = models.JSONField(blank=True, null=True) # For tx_hash, notes, etc.\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n\n    def __str__(self):\n        return f'{self.transaction_type} of {self.amount} {self.wallet.currency} for {self.wallet.user.username}'\n"
  },
  {
    "path": "apps/wallets/serializers.py",
    "content": "from rest_framework import serializers\nfrom .models import Wallet, Transaction\n\nclass WalletSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Wallet\n        fields = ('id', 'wallet_type', 'currency', 'network', 'balance', 'address')\n\nclass TransactionSerializer(serializers.ModelSerializer):\n    wallet = WalletSerializer(read_only=True)\n    class Meta:\n        model = Transaction\n        fields = ('id', 'transaction_type', 'amount', 'status', 'metadata', 'created_at', 'wallet')\n\nclass CurrencySwapSerializer(serializers.Serializer):\n    from_currency = serializers.CharField(max_length=10)\n    to_currency = serializers.CharField(max_length=10)\n    amount = serializers.DecimalField(max_digits=18, decimal_places=8)\n\n    def validate(self, data):\n        if data['from_currency'] == data['to_currency']:\n            raise serializers.ValidationError(\"Cannot swap the same currency.\")\n        return data\n"
  },
  {
    "path": "apps/wallets/views.py",
    "content": "from rest_framework import generics, views, response, status\nfrom .models import Wallet, Transaction\nfrom .serializers import WalletSerializer, TransactionSerializer, CurrencySwapSerializer\nfrom decimal import Decimal\n\nclass WalletListView(generics.ListAPIView):\n    serializer_class = WalletSerializer\n\n    def get_queryset(self):\n        return Wallet.objects.filter(user=self.request.user)\n\nclass TransactionHistoryView(generics.ListAPIView):\n    serializer_class = TransactionSerializer\n\n    def get_queryset(self):\n        wallet_id = self.kwargs.get('wallet_id')\n        return Transaction.objects.filter(\n            wallet__user=self.request.user,\n            wallet_id=wallet_id\n        ).order_by('-created_at')\n\nclass CurrencySwapView(views.APIView):\n    def get_exchange_rate(self, from_currency, to_currency):\n        # In a real app, this would call an external API (Coinbase, Binance, etc.)\n        # Mocking rates for demonstration\n        rates = {\n            ('USD', 'USDT'): Decimal('1.00'), ('USDT', 'USD'): Decimal('0.998'),\n            ('USD', 'NGN'): Decimal('1450.50'), ('NGN', 'USD'): Decimal('0.00068'),\n        }\n        return rates.get((from_currency, to_currency), None)\n\n    def post(self, request):\n        serializer = CurrencySwapSerializer(data=request.data)\n        if not serializer.is_valid():\n            return response.Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n        \n        data = serializer.validated_data\n        user = request.user\n        amount = data['amount']\n\n        try:\n            from_wallet = Wallet.objects.get(user=user, currency=data['from_currency'])\n            to_wallet = Wallet.objects.get(user=user, currency=data['to_currency'])\n        except Wallet.DoesNotExist:\n            return response.Response({'error': 'One or both wallets not found.'}, status=status.HTTP_404_NOT_FOUND)\n\n        if from_wallet.balance < amount:\n            return response.Response({'error': 'Insufficient balance.'}, status=status.HTTP_400_BAD_REQUEST)\n        \n        rate = self.get_exchange_rate(data['from_currency'], data['to_currency'])\n        if rate is None:\n            return response.Response({'error': 'Exchange rate not available for this pair.'}, status=status.HTTP_400_BAD_REQUEST)\n\n        converted_amount = amount * rate\n        # For simplicity, no fees applied in this example\n\n        from_wallet.balance -= amount\n        to_wallet.balance += converted_amount\n\n        from_wallet.save()\n        to_wallet.save()\n\n        return response.Response({'message': 'Swap successful', 'converted_amount': converted_amount}, status=status.HTTP_200_OK)\n"
  },
  {
    "path": "apps/wallets/urls.py",
    "content": "from django.urls import path\nfrom .views import WalletListView, TransactionHistoryView, CurrencySwapView\n\nurlpatterns = [\n    path('wallets/', WalletListView.as_view(), name='wallet-list'),\n    path('wallets/<uuid:wallet_id>/transactions/', TransactionHistoryView.as_view(), name='transaction-history'),\n    path('wallets/swap/', CurrencySwapView.as_view(), name='currency-swap'),\n]\n"
  },
  {
    "path": "apps/gaming/apps.py",
    "content": "from django.apps import AppConfig\n\nclass GamingConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'apps.gaming'\n"
  },
  {
    "path": "apps/gaming/models.py",
    "content": "import uuid\nfrom django.db import models\nfrom apps.users.models import User\n\nclass ThirdPartyPlatform(models.Model):\n    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n    name = models.CharField(max_length=100, unique=True) # e.g., \"BIG WANG\"\n    api_key = models.CharField(max_length=255)\n    cashier_url = models.URLField()\n\n    def __str__(self):\n        return self.name\n\nclass GameAccount(models.Model):\n    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name='game_accounts')\n    platform = models.ForeignKey(ThirdPartyPlatform, on_delete=models.CASCADE)\n    platform_user_id = models.CharField(max_length=100) # The user's ID on the gaming site\n\n    class Meta:\n        unique_together = ('user', 'platform')\n\n    def __str__(self):\n        return f'{self.user.username} on {self.platform.name}'\n"
  },
  {
    "path": "apps/gaming/views.py",
    "content": "from rest_framework import generics\nfrom .models import ThirdPartyPlatform, GameAccount\nfrom .serializers import ThirdPartyPlatformSerializer, GameAccountSerializer\n\nclass PlatformListView(generics.ListAPIView):\n    queryset = ThirdPartyPlatform.objects.all()\n    serializer_class = ThirdPartyPlatformSerializer\n\nclass GameAccountLinkView(generics.CreateAPIView):\n    serializer_class = GameAccountSerializer\n\n    def perform_create(self, serializer):\n        serializer.save(user=self.request.user)\n"
  },
  {
    "path": "apps/gaming/serializers.py",
    "content": "from rest_framework import serializers\nfrom .models import ThirdPartyPlatform, GameAccount\n\nclass ThirdPartyPlatformSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = ThirdPartyPlatform\n        fields = ('id', 'name')\n\nclass GameAccountSerializer(serializers.ModelSerializer):\n    platform_name = serializers.CharField(source='platform.name', read_only=True)\n\n    class Meta:\n        model = GameAccount\n        fields = ('id', 'platform', 'platform_user_id', 'platform_name')\n        extra_kwargs = {'platform': {'write_only': True}}\n"
  },
  {
    "path": "apps/gaming/urls.py",
    "content": "from django.urls import path\nfrom .views import PlatformListView, GameAccountLinkView\n\nurlpatterns = [\n    path('gaming/platforms/', PlatformListView.as_view(), name='platform-list'),\n    path('gaming/accounts/', GameAccountLinkView.as_view(), name='game-account-link'),\n]\n"
  },
  {
    "path": "apps/cashier/apps.py",
    "content": "from django.apps import AppConfig\n\nclass CashierConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'apps.cashier'\n"
  },
  {
    "path": "apps/cashier/services.py",
    "content": "import requests\nfrom decimal import Decimal\nfrom django.db import transaction\nfrom apps.wallets.models import Wallet, Transaction as WalletTransaction\nfrom apps.gaming.models import GameAccount, ThirdPartyPlatform\n\n@transaction.atomic\ndef process_cashapp_deposit(user, amount, metadata):\n    \"\"\"Processes a CashApp deposit, crediting a user's wallet.\"\"\"\n    usd_wallet, _ = Wallet.objects.get_or_create(user=user, currency='USD')\n\n    # Check for duplicate transaction\n    if WalletTransaction.objects.filter(metadata__cashapp_tx_id=metadata.get('cashapp_tx_id')).exists():\n        raise ValueError('Duplicate transaction detected.')\n\n    # Create deposit transaction\n    deposit_tx = WalletTransaction.objects.create(\n        wallet=usd_wallet,\n        transaction_type='DEPOSIT',\n        amount=amount,\n        status='COMPLETED',\n        metadata=metadata\n    )\n\n    # Update wallet balance\n    usd_wallet.balance += Decimal(amount)\n    usd_wallet.save()\n    \n    return deposit_tx\n\n@transaction.atomic\ndef credit_gaming_account(user, platform_name, amount, deposit_tx):\n    \"\"\"Credits a linked gaming account and creates a TOP_UP transaction.\"\"\"\n    try:\n        game_account = GameAccount.objects.get(user=user, platform__name__iexact=platform_name)\n        usd_wallet = Wallet.objects.get(user=user, currency='USD')\n    except (GameAccount.DoesNotExist, Wallet.DoesNotExist):\n        # Cannot proceed if accounts don't exist\n        deposit_tx.metadata['top_up_status'] = f'FAILED: Game account for {platform_name} not linked.'\n        deposit_tx.save()\n        return\n\n    if usd_wallet.balance < Decimal(amount):\n        deposit_tx.metadata['top_up_status'] = 'FAILED: Insufficient USD balance for top-up.'\n        deposit_tx.save()\n        return\n    \n    # 1. Deduct from wallet and create TOP_UP transaction\n    usd_wallet.balance -= Decimal(amount)\n    top_up_tx = WalletTransaction.objects.create(\n        wallet=usd_wallet,\n        transaction_type='TOP_UP',\n        amount=amount,\n        status='PENDING',\n        metadata={'source_deposit_id': str(deposit_tx.id), 'platform': platform_name}\n    )\n    usd_wallet.save()\n\n    # 2. Notify third-party platform\n    try:\n        headers = {'X-API-KEY': game_account.platform.api_key, 'Content-Type': 'application/json'}\n        payload = {\n            'user_id': game_account.platform_user_id,\n            'amount': str(amount),\n            'currency': 'USD',\n            'transaction_id': str(top_up_tx.id)\n        }\n        response = requests.post(game_account.platform.cashier_url, json=payload, headers=headers, timeout=10)\n        response.raise_for_status()\n        \n        # If successful, mark top-up as completed\n        top_up_tx.status = 'COMPLETED'\n        top_up_tx.metadata['platform_response'] = response.json()\n\n    except requests.RequestException as e:\n        # If notification fails, mark as failed for manual review\n        top_up_tx.status = 'FAILED'\n        top_up_tx.metadata['error'] = str(e)\n        # IMPORTANT: Logic to refund the user or retry should be here\n        # For now, we just log the failure.\n    \n    finally:\n        top_up_tx.save()\n        deposit_tx.metadata['top_up_tx_id'] = str(top_up_tx.id)\n        deposit_tx.save()\n"
  },
  {
    "path": "apps/cashier/views.py",
    "content": "from rest_framework import views, response, status, permissions\nfrom django.conf import settings\nfrom decimal import Decimal\nimport re\n\nfrom apps.users.models import User\nfrom apps.wallets.models import Transaction, Wallet\nfrom .services import process_cashapp_deposit, credit_gaming_account\n\nclass CashAppWebhookView(views.APIView):\n    permission_classes = [permissions.AllowAny] # Security should be handled by a secret key/IP whitelist\n\n    def post(self, request):\n        # A real implementation should validate a secret token from the webhook source\n        # For example: `if request.headers.get('X-Secret-Token') != settings.ZAPIER_SECRET:`\n\n        data = request.data\n        note = data.get('note', '')\n        amount_str = data.get('amount')\n        tx_id = data.get('transaction_id')\n\n        if not all([note, amount_str, tx_id]):\n            return response.Response({'error': 'Missing required fields.'}, status=status.HTTP_400_BAD_REQUEST)\n        \n        # Parse UID and optional GAME from memo, e.g., \"UID:uuid-1234 GAME:BIGWANG\"\n        uid_match = re.search(r'UID:([a-fA-F0-9\\\\-]+)', note)\n        game_match = re.search(r'GAME:(\\\\w+)', note)\n\n        if not uid_match:\n            return response.Response({'error': 'Valid user ID not found in note.'}, status=status.HTTP_400_BAD_REQUEST)\n        \n        user_id = uid_match.group(1)\n        try:\n            user = User.objects.get(id=user_id)\n            amount = Decimal(amount_str)\n        except (User.DoesNotExist, ValueError):\n            return response.Response({'error': 'Invalid user or amount.'}, status=status.HTTP_400_BAD_REQUEST)\n\n        metadata = {\n            'cashapp_sender': data.get('sender_cashtag'),\n            'cashapp_note': note,\n            'cashapp_tx_id': tx_id\n        }\n\n        try:\n            deposit_tx = process_cashapp_deposit(user, amount, metadata)\n        except ValueError as e:\n            return response.Response({'error': str(e)}, status=status.HTTP_409_CONFLICT)\n\n        # If a game was specified, attempt to credit the game account directly\n        if game_match:\n            platform_name = game_match.group(1)\n            credit_gaming_account(user, platform_name, amount, deposit_tx)\n\n        return response.Response({'message': 'Deposit processed successfully.'}, status=status.HTTP_200_OK)\n\n\nclass TRC20PayoutInitiateView(views.APIView):\n    def post(self, request):\n        user = request.user\n        amount_str = request.data.get('amount')\n        address = request.data.get('address')\n\n        if not all([amount_str, address]):\n            return response.Response({'error': 'Amount and address are required.'}, status=status.HTTP_400_BAD_REQUEST)\n        \n        try:\n            amount = Decimal(amount_str)\n            usdt_wallet = Wallet.objects.get(user=user, currency='USDT', network='TRC20')\n        except (Wallet.DoesNotExist, ValueError):\n            return response.Response({'error': 'Invalid amount or USDT wallet not found.'}, status=status.HTTP_400_BAD_REQUEST)\n\n        if usdt_wallet.balance < amount:\n            return response.Response({'error': 'Insufficient balance.'}, status=status.HTTP_400_BAD_REQUEST)\n        \n        # Deduct balance immediately and mark as pending\n        usdt_wallet.balance -= amount\n        usdt_wallet.save()\n\n        Transaction.objects.create(\n            wallet=usdt_wallet,\n            transaction_type='WITHDRAWAL',\n            amount=amount,\n            status='PENDING', # Requires admin approval to proceed\n            metadata={'destination_address': address}\n        )\n\n        return response.Response({'message': 'Payout request submitted for approval.'}, status=status.HTTP_201_CREATED)\n"
  },
  {
    "path": "apps/cashier/urls.py",
    "content": "from django.urls import path\nfrom .views import CashAppWebhookView, TRC20PayoutInitiateView\n\nurlpatterns = [\n    path('payments/cashapp/notify/', CashAppWebhookView.as_view(), name='cashapp-webhook'),\n    path('payouts/trc20/initiate/', TRC20PayoutInitiateView.as_view(), name='trc20-payout-initiate'),\n]\n"
  }
]
