[
  {
    "path": "lib/universal_cashier_sdk.dart",
    "content": "/// A barrel file that exports all the public-facing components of the SDK.\n///\n/// This allows integrator platforms to import a single file to get access to\n/// the main widget and theme configuration.\n\nlibrary universal_cashier_sdk;\n\n// The main embeddable widget.\nexport 'src/views/universal_cashier_view.dart';\n\n// Data model for theme customization.\nexport 'src/models/cashier_theme.dart';\n"
  },
  {
    "path": "lib/src/models/cashier_theme.dart",
    "content": "import 'package:flutter/material.dart';\n\n/// A data class for white-labeling the Universal Cashier SDK.\n///\n/// Allows integrator platforms to customize the appearance of the cashier\n/// to match their brand identity.\nclass CashierTheme {\n  /// A publicly accessible URL for the brand's logo.\n  /// Displayed at the top of the cashier. Recommended dimensions: 240x80px.\n  final String? logoUrl;\n\n  /// The primary color used for main UI elements like buttons and headers.\n  final Color primaryColor;\n\n  /// The secondary color used for backgrounds and container elements.\n  final Color secondaryColor;\n\n  /// The accent color used for highlights, focus indicators, and interactive elements.\n  final Color accentColor;\n\n  /// The primary font family to be used throughout the widget.\n  final String? fontFamily;\n\n  /// A list of payment method IDs to be explicitly enabled.\n  /// e.g., ['cashapp', 'trc20_usdt']\n  /// If null or empty, all configured methods will be shown.\n  final List<String>? enabledPaymentMethods;\n\n  /// Constructs a [CashierTheme].\n  ///\n  /// Provides default values based on the yellow, black, and white base theme\n  /// if no custom values are provided.\n  const CashierTheme({\n    this.logoUrl,\n    this.primaryColor = const Color(0xFFFBBF24), // Default: Amber 400\n    this.secondaryColor = const Color(0xFF18181B), // Default: Zinc 900\n    this.accentColor = const Color(0xFFFFFFFF), // Default: White\n    this.fontFamily,\n    this.enabledPaymentMethods,\n  });\n}\n"
  },
  {
    "path": "lib/src/models/data_models.dart",
    "content": "/// This file contains all the data models for API requests and responses.\n/// These models provide type safety and easy serialization/deserialization.\n\n/// Represents a transaction within the cashier system.\nclass Transaction {\n  final String id;\n  final String type; // 'DEPOSIT' or 'PAYOUT'\n  final String status; // 'PENDING', 'COMPLETED', 'FAILED'\n  final Amount amount;\n  final String paymentMethod;\n  final DateTime createdAt;\n  final DateTime? completedAt;\n\n  Transaction({\n    required this.id,\n    required this.type,\n    required this.status,\n    required this.amount,\n    required this.paymentMethod,\n    required this.createdAt,\n    this.completedAt,\n  });\n\n  factory Transaction.fromJson(Map<String, dynamic> json) {\n    return Transaction(\n      id: json['id'],\n      type: json['type'],\n      status: json['status'],\n      amount: Amount.fromJson(json['amount']),\n      paymentMethod: json['paymentMethod'],\n      createdAt: DateTime.parse(json['createdAt']),\n      completedAt: json['completedAt'] != null ? DateTime.parse(json['completedAt']) : null,\n    );\n  }\n}\n\n/// Represents a monetary amount with currency.\nclass Amount {\n  final String value;\n  final String currency;\n\n  Amount({required this.value, required this.currency});\n\n  factory Amount.fromJson(Map<String, dynamic> json) {\n    return Amount(value: json['value'], currency: json['currency']);\n  }\n}\n\n/// Represents the user profile data passed from the host platform.\nclass UserProfile {\n  final String platformUserId;\n  final String name;\n\n  UserProfile({required this.platformUserId, required this.name});\n\n  factory UserProfile.fromJson(Map<String, dynamic> json) {\n    return UserProfile(\n      platformUserId: json['sub'],\n      name: json['name'],\n    );\n  }\n}\n\n/// Represents an available payment method.\nclass PaymentMethod {\n  final String id;\n  final String name;\n  final String type; // 'DEPOSIT' or 'PAYOUT'\n  final String logoUrl;\n\n  PaymentMethod({\n    required this.id,\n    required this.name,\n    required this.type,\n    required this.logoUrl,\n  });\n\n  factory PaymentMethod.fromJson(Map<String, dynamic> json) {\n    return PaymentMethod(\n      id: json['id'],\n      name: json['name'],\n      type: json['type'],\n      logoUrl: json['logoUrl'],\n    );\n  }\n}\n"
  },
  {
    "path": "lib/src/services/api_service.dart",
    "content": "import 'dart:convert';\nimport 'package:http/http.dart' as http;\n\nimport '../models/data_models.dart';\n\n/// A service class to handle all interactions with the Universal Cashier backend API.\nclass ApiService {\n  final String _baseUrl = 'https://api.cashiersdk.com/v1'; // Example API base URL\n  final String apiKey;\n\n  ApiService({required this.apiKey});\n\n  Map<String, String> _getHeaders(String userToken) => {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $userToken', // The JWS token\n        'X-Api-Key': apiKey,\n      };\n\n  /// Initializes a cashier session and fetches available payment methods.\n  Future<Map<String, dynamic>> initializeSession(String userToken) async {\n    final response = await http.post(\n      Uri.parse('$_baseUrl/cashier/initialize'),\n      headers: _getHeaders(userToken),\n    );\n    if (response.statusCode == 200) {\n      return json.decode(response.body);\n    } else {\n      throw Exception('Failed to initialize session');\n    }\n  }\n\n  /// Initiates a deposit and returns payment instructions (e.g., for Cash App).\n  Future<Map<String, dynamic>> createDeposit(String userToken, double amount, String currency, String method) async {\n    final response = await http.post(\n      Uri.parse('$_baseUrl/cashier/deposit/initiate'),\n      headers: _getHeaders(userToken),\n      body: json.encode({'amount': amount, 'currency': currency, 'method': method}),\n    );\n    if (response.statusCode == 200) {\n      return json.decode(response.body);\n    } else {\n      throw Exception('Failed to create deposit');\n    }\n  }\n\n  /// Requests a payout to a specified address (e.g., TRC20 wallet).\n  Future<Transaction> requestPayout(String userToken, double amount, String currency, String address) async {\n    final response = await http.post(\n      Uri.parse('$_baseUrl/cashier/payout/initiate'),\n      headers: _getHeaders(userToken),\n      body: json.encode({'amount': amount, 'currency': currency, 'address': address}),\n    );\n     if (response.statusCode == 201) {\n      return Transaction.fromJson(json.decode(response.body));\n    } else {\n      throw Exception('Failed to request payout');\n    }\n  }\n\n  /// Fetches the status of a specific transaction.\n  Future<Transaction> getTransactionStatus(String userToken, String transactionId) async {\n    final response = await http.get(\n      Uri.parse('$_baseUrl/cashier/transactions/$transactionId'),\n      headers: _getHeaders(userToken),\n    );\n    if (response.statusCode == 200) {\n      return Transaction.fromJson(json.decode(response.body));\n    } else {\n      throw Exception('Failed to get transaction status');\n    }\n  }\n}\n"
  },
  {
    "path": "lib/src/state/cashier_state.dart",
    "content": "import 'package:flutter/foundation.dart';\nimport '../models/data_models.dart';\n\n/// A sealed class representing the various states of the cashier UI.\n/// Using a sealed class ensures that we handle all possible states in the UI.\n@immutable\nsealed class CashierState {}\n\n/// The initial state before any data is loaded.\nclass CashierInitial extends CashierState {}\n\n/// State indicating that data is being loaded from the backend.\nclass CashierLoading extends CashierState {}\n\n/// The state when the cashier has been successfully initialized.\n/// Contains the user profile and available payment methods.\nclass CashierLoaded extends CashierState {\n  final UserProfile userProfile;\n  final List<PaymentMethod> depositMethods;\n  final List<PaymentMethod> payoutMethods;\n\n  CashierLoaded({\n    required this.userProfile,\n    required this.depositMethods,\n    required this.payoutMethods,\n  });\n}\n\n/// The state when the UI needs to show deposit instructions (e.g., a Cashtag).\nclass CashierShowDepositInstructions extends CashierLoaded {\n  final Map<String, dynamic> instructions;\n\n  CashierShowDepositInstructions({\n    required super.userProfile,\n    required super.depositMethods,\n    required super.payoutMethods,\n    required this.instructions,\n  });\n}\n\n/// The state representing an error during an operation.\nclass CashierError extends CashierState {\n  final String message;\n  CashierError(this.message);\n}\n"
  },
  {
    "path": "lib/src/state/cashier_provider.dart",
    "content": "import 'package:flutter_riverpod/flutter_riverpod.dart';\nimport 'cashier_state.dart';\nimport '../services/api_service.dart';\nimport '../models/data_models.dart';\n\n/// StateNotifier for managing the cashier's state machine.\nclass CashierNotifier extends StateNotifier<CashierState> {\n  final ApiService _apiService;\n  final String _userToken;\n\n  CashierNotifier(this._apiService, this._userToken) : super(CashierInitial()) {\n    _initialize();\n  }\n\n  Future<void> _initialize() async {\n    try {\n      state = CashierLoading();\n      final sessionData = await _apiService.initializeSession(_userToken);\n      \n      final userProfile = UserProfile.fromJson(sessionData['user']);\n      final depositMethods = (sessionData['depositMethods'] as List)\n          .map((data) => PaymentMethod.fromJson(data))\n          .toList();\n      final payoutMethods = (sessionData['payoutMethods'] as List)\n          .map((data) => PaymentMethod.fromJson(data))\n          .toList();\n\n      state = CashierLoaded(\n        userProfile: userProfile,\n        depositMethods: depositMethods,\n        payoutMethods: payoutMethods,\n      );\n    } catch (e) {\n      state = CashierError(e.toString());\n    }\n  }\n\n  Future<void> initiateCashAppDeposit(double amount) async {\n    final currentState = state;\n    if (currentState is CashierLoaded) {\n      try {\n        final instructions = await _apiService.createDeposit(_userToken, amount, 'USD', 'cashapp');\n        state = CashierShowDepositInstructions(\n            userProfile: currentState.userProfile,\n            depositMethods: currentState.depositMethods,\n            payoutMethods: currentState.payoutMethods,\n            instructions: instructions);\n      } catch (e) {\n        state = CashierError(e.toString());\n      }\n    }\n  }\n\n   Future<void> initiateTrc20Payout(double amount, String address) async {\n    final currentState = state;\n    if (currentState is CashierLoaded) {\n        try {\n            await _apiService.requestPayout(_userToken, amount, 'USDT', address);\n            // In a real app, you might move to a 'payout pending' screen\n            // For now, we can just reload the main view\n            _initialize(); \n        } catch(e) {\n            state = CashierError(e.toString());\n        }\n    }\n  }\n}\n\n/// Riverpod provider for the ApiService.\nfinal apiServiceProvider = Provider<ApiService>((ref) {\n  // In a real app, the API key would be passed in during SDK initialization.\n  return ApiService(apiKey: 'YOUR_PUBLIC_API_KEY');\n});\n\n/// Riverpod provider for the CashierNotifier.\n/// The 'family' modifier allows us to pass the userToken at runtime.\nfinal cashierProvider = StateNotifierProvider.autoDispose.family<CashierNotifier, CashierState, String>((ref, userToken) {\n  final apiService = ref.watch(apiServiceProvider);\n  return CashierNotifier(apiService, userToken);\n});\n"
  },
  {
    "path": "lib/src/views/universal_cashier_view.dart",
    "content": "import 'package:flutter/material.dart';\nimport 'package:flutter_riverpod/flutter_riverpod.dart';\n\nimport '../models/cashier_theme.dart';\nimport '../state/cashier_provider.dart';\nimport '../state/cashier_state.dart';\nimport 'deposit/deposit_view.dart';\nimport 'payout/payout_view.dart';\nimport '../widgets/loading_indicator.dart';\n\n/// The main embeddable widget for the Universal Cashier SDK.\nclass UniversalCashierView extends ConsumerWidget {\n  /// The JWS token for the current user session.\n  final String userToken;\n  \n  /// The initial mode ('deposit' or 'payout').\n  final String mode;\n  \n  /// The theme configuration for white-labeling.\n  final CashierTheme theme;\n\n  const UniversalCashierView({\n    super.key,\n    required this.userToken,\n    this.mode = 'deposit',\n    this.theme = const CashierTheme(),\n  });\n\n  @override\n  Widget build(BuildContext context, WidgetRef ref) {\n    final cashierState = ref.watch(cashierProvider(userToken));\n\n    return Theme(\n      data: ThemeData(\n        brightness: Brightness.dark,\n        primaryColor: theme.primaryColor,\n        scaffoldBackgroundColor: theme.secondaryColor,\n        fontFamily: theme.fontFamily,\n        colorScheme: ColorScheme.dark(\n          primary: theme.primaryColor,\n          secondary: theme.accentColor,\n          surface: theme.secondaryColor,\n        ),\n      ),\n      child: Scaffold(\n        body: SafeArea(\n          child: _buildBody(context, cashierState),\n        ),\n      ),\n    );\n  }\n\n  Widget _buildBody(BuildContext context, CashierState state) {\n    return switch (state) {\n      CashierInitial() || CashierLoading() => const Center(child: ThemedLoadingIndicator()),\n      CashierLoaded() => _buildMainView(context, state),\n      CashierError(message: final msg) => Center(child: Text('Error: $msg')),\n      // Handle specific states like showing instructions\n      CashierShowDepositInstructions() => _buildMainView(context, state), \n    };\n  }\n\n  Widget _buildMainView(BuildContext context, CashierLoaded state) {\n    // This could be a TabBarView for switching between Deposit and Payout\n    // For simplicity, we'll show one based on the initial mode.\n    if (mode == 'deposit') {\n        return DepositView(state: state);\n    }\n    return PayoutView(state: state);\n  }\n}\n"
  },
  {
    "path": "lib/src/views/deposit/deposit_view.dart",
    "content": "import 'package:flutter/material.dart';\nimport 'package:flutter_riverpod/flutter_riverpod.dart';\n\nimport '../../state/cashier_state.dart';\nimport 'cash_app_deposit_view.dart';\n\n/// A view that displays available deposit methods.\nclass DepositView extends ConsumerWidget {\n  final CashierLoaded state;\n\n  const DepositView({super.key, required this.state});\n\n  @override\n  Widget build(BuildContext context, WidgetRef ref) {\n    // If we are in the instruction-showing state, display that UI.\n    if (state is CashierShowDepositInstructions) {\n      return CashAppDepositView(\n        instructions: (state as CashierShowDepositInstructions).instructions,\n      );\n    }\n\n    // Otherwise, show a list of deposit methods.\n    // Here we'll hardcode to go directly to the Cash App flow for demo purposes.\n    return Padding(\n      padding: const EdgeInsets.all(16.0),\n      child: Column(\n        crossAxisAlignment: CrossAxisAlignment.start,\n        children: [\n          const Text('Select Deposit Method', style: TextStyle(fontSize: 24, fontWeight: FontWeight.bold)),\n          const SizedBox(height: 24),\n          \n          // In a real app, this would be a dynamic list built from `state.depositMethods`\n          ListTile(\n            leading: const Icon(Icons.money, size: 40), // Placeholder icon\n            title: const Text('Cash App'),\n            subtitle: const Text('Deposit via your Cashtag'),\n            tileColor: Colors.grey.shade800,\n            shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(8)),\n            onTap: () {\n              // This would typically open a dialog to enter the amount.\n              // For simplicity, let's assume a fixed amount for now.\n              // ref.read(cashierProvider(userToken).notifier).initiateCashAppDeposit(100.0);\n              Navigator.of(context).push(MaterialPageRoute(builder: (_) => const CashAppAmountEntryView()));\n            },\n          ),\n        ],\n      ),\n    );\n  }\n}\n\n// A placeholder screen to enter deposit amount.\nclass CashAppAmountEntryView extends ConsumerWidget {\n  const CashAppAmountEntryView({super.key});\n  @override\n  Widget build(BuildContext context, WidgetRef ref) {\n    // A real implementation would have a text field and a button.\n    // This is a simplified example.\n    return Scaffold(\n        appBar: AppBar(title: const Text('Enter Amount')),\n        body: Center(\n            child: ElevatedButton(\n                child: const Text('Deposit \\$50'),\n                onPressed: (){\n                    // userToken would be retrieved from a higher-level provider.\n                    // This is a structural example.\n                    // ref.read(cashierProvider('user-token-placeholder').notifier).initiateCashAppDeposit(50.0);\n                },\n            )\n        )\n    );\n  }\n}\n"
  },
  {
    "path": "lib/src/views/deposit/cash_app_deposit_view.dart",
    "content": "import 'package:flutter/material.dart';\nimport 'package:flutter/services.dart';\n\n/// Displays the instructions for making a Cash App deposit.\nclass CashAppDepositView extends StatelessWidget {\n  final Map<String, dynamic> instructions;\n\n  const CashAppDepositView({super.key, required this.instructions});\n\n  @override\n  Widget build(BuildContext context) {\n    final String cashtag = instructions['cashtag'] ?? 'N/A';\n    final String memo = instructions['memo'] ?? 'N/A';\n\n    return Padding(\n      padding: const EdgeInsets.all(20.0),\n      child: Column(\n        mainAxisAlignment: MainAxisAlignment.center,\n        crossAxisAlignment: CrossAxisAlignment.stretch,\n        children: [\n          const Text(\n            'Complete Your Deposit',\n            style: TextStyle(fontSize: 24, fontWeight: FontWeight.bold),\n            textAlign: TextAlign.center,\n          ),\n          const SizedBox(height: 16),\n          const Text(\n            'Send the exact amount to the following Cashtag. You MUST include the memo code.',\n            textAlign: TextAlign.center,\n            style: TextStyle(color: Colors.grey),\n          ),\n          const SizedBox(height: 32),\n          _buildInstructionRow(context, 'Cashtag', cashtag),\n          const SizedBox(height: 16),\n          _buildInstructionRow(context, 'Memo Code', memo),\n          const SizedBox(height: 32),\n          const Text(\n            'Your account will be credited automatically once payment is confirmed.',\n            textAlign: TextAlign.center,\n            style: TextStyle(color: Colors.grey, fontStyle: FontStyle.italic),\n          ),\n        ],\n      ),\n    );\n  }\n\n  Widget _buildInstructionRow(BuildContext context, String label, String value) {\n    return Container(\n      padding: const EdgeInsets.all(16),\n      decoration: BoxDecoration(\n        color: Colors.grey.shade800.withOpacity(0.5),\n        borderRadius: BorderRadius.circular(12),\n      ),\n      child: Row(\n        mainAxisAlignment: MainAxisAlignment.spaceBetween,\n        children: [\n          Column(\n            crossAxisAlignment: CrossAxisAlignment.start,\n            children: [\n              Text(label, style: const TextStyle(color: Colors.grey, fontSize: 12)),\n              const SizedBox(height: 4),\n              Text(value, style: const TextStyle(fontSize: 18, fontWeight: FontWeight.bold)),\n            ],\n          ),\n          IconButton(\n            icon: const Icon(Icons.copy, color: Colors.amber),\n            onPressed: () {\n              Clipboard.setData(ClipboardData(text: value));\n              ScaffoldMessenger.of(context).showSnackBar(\n                SnackBar(content: Text('$label copied to clipboard')),\n              );\n            },\n          ),\n        ],\n      ),\n    );\n  }\n}\n"
  },
  {
    "path": "lib/src/views/payout/payout_view.dart",
    "content": "import 'package:flutter/material.dart';\nimport 'package:flutter_riverpod/flutter_riverpod.dart';\nimport '../../state/cashier_state.dart';\nimport 'trc20_payout_view.dart';\n\n/// A view that displays available payout methods.\nclass PayoutView extends ConsumerWidget {\n  final CashierLoaded state;\n\n  const PayoutView({super.key, required this.state});\n\n  @override\n  Widget build(BuildContext context, WidgetRef ref) {\n    // This would be built from `state.payoutMethods`.\n    // For this example, we show the TRC20 option directly.\n    return Padding(\n      padding: const EdgeInsets.all(16.0),\n      child: Column(\n        crossAxisAlignment: CrossAxisAlignment.start,\n        children: [\n          const Text('Request Payout', style: TextStyle(fontSize: 24, fontWeight: FontWeight.bold)),\n          const SizedBox(height: 24),\n          ListTile(\n            leading: const Icon(Icons.account_balance_wallet, size: 40), // Placeholder\n            title: const Text('TRC20 Wallet (USDT)'),\n            subtitle: const Text('Withdraw to a TRON address'),\n            tileColor: Colors.grey.shade800,\n            shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(8)),\n            onTap: () {\n               Navigator.of(context).push(MaterialPageRoute(\n                 builder: (_) => const Trc20PayoutView()\n               ));\n            },\n          ),\n        ],\n      ),\n    );\n  }\n}\n"
  },
  {
    "path": "lib/src/views/payout/trc20_payout_view.dart",
    "content": "import 'package:flutter/material.dart';\nimport 'package:flutter_riverpod/flutter_riverpod.dart';\nimport '../../widgets/themed_button.dart';\nimport '../../state/cashier_provider.dart';\n\n/// A form for initiating a payout to a TRC20 wallet address.\nclass Trc20PayoutView extends ConsumerStatefulWidget {\n  const Trc20PayoutView({super.key});\n\n  @override\n  ConsumerState<Trc20PayoutView> createState() => _Trc20PayoutViewState();\n}\n\nclass _Trc20PayoutViewState extends ConsumerState<Trc20PayoutView> {\n  final _formKey = GlobalKey<FormState>();\n  final _addressController = TextEditingController();\n  final _amountController = TextEditingController();\n  bool _isLoading = false;\n\n  @override\n  void dispose() {\n    _addressController.dispose();\n    _amountController.dispose();\n    super.dispose();\n  }\n\n  void _submitPayout() async {\n    if (_formKey.currentState!.validate()) {\n      setState(() => _isLoading = true);\n      final amount = double.tryParse(_amountController.text) ?? 0.0;\n      final address = _addressController.text;\n\n      // As in the deposit view, the user token would be available from a higher-level provider.\n      // await ref.read(cashierProvider('user-token-placeholder').notifier).initiateTrc20Payout(amount, address);\n      \n      // Mock delay\n      await Future.delayed(const Duration(seconds: 2));\n\n      setState(() => _isLoading = false);\n\n      if (mounted) {\n        ScaffoldMessenger.of(context).showSnackBar(\n          const SnackBar(content: Text('Payout request submitted for review.')),\n        );\n        Navigator.of(context).pop();\n      }\n    }\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(title: const Text('TRC20 Payout')),\n      body: SingleChildScrollView(\n        padding: const EdgeInsets.all(20.0),\n        child: Form(\n          key: _formKey,\n          child: Column(\n            crossAxisAlignment: CrossAxisAlignment.stretch,\n            children: [\n              TextFormField(\n                controller: _addressController,\n                decoration: const InputDecoration(labelText: 'TRC20 Wallet Address (USDT)'),\n                validator: (value) => (value == null || value.isEmpty) ? 'Please enter an address' : null,\n              ),\n              const SizedBox(height: 20),\n              TextFormField(\n                controller: _amountController,\n                decoration: const InputDecoration(labelText: 'Amount (USDT)'),\n                keyboardType: const TextInputType.numberWithOptions(decimal: true),\n                validator: (value) {\n                  if (value == null || value.isEmpty) return 'Please enter an amount';\n                  if (double.tryParse(value) == null) return 'Invalid amount';\n                  return null;\n                },\n              ),\n              const SizedBox(height: 40),\n              _isLoading\n                  ? const Center(child: CircularProgressIndicator())\n                  : ThemedButton(text: 'Request Payout', onPressed: _submitPayout),\n            ],\n          ),\n        ),\n      ),\n    );\n  }\n}\n"
  },
  {
    "path": "lib/src/widgets/loading_indicator.dart",
    "content": "import 'package:flutter/material.dart';\n\n/// A simple, themed loading indicator that uses the primary color from the theme.\nclass ThemedLoadingIndicator extends StatelessWidget {\n  const ThemedLoadingIndicator({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return CircularProgressIndicator(\n      valueColor: AlwaysStoppedAnimation<Color>(\n        Theme.of(context).primaryColor,\n      ),\n    );\n  }\n}\n"
  },
  {
    "path": "lib/src/widgets/themed_button.dart",
    "content": "import 'package:flutter/material.dart';\n\n/// A reusable button that automatically styles itself based on the cashier theme.\nclass ThemedButton extends StatelessWidget {\n  final String text;\n  final VoidCallback? onPressed;\n\n  const ThemedButton({super.key, required this.text, this.onPressed});\n\n  @override\n  Widget build(BuildContext context) {\n    return ElevatedButton(\n      style: ElevatedButton.styleFrom(\n        backgroundColor: Theme.of(context).primaryColor,\n        foregroundColor: Theme.of(context).colorScheme.onPrimary,\n        padding: const EdgeInsets.symmetric(vertical: 16),\n        shape: RoundedRectangleBorder(\n          borderRadius: BorderRadius.circular(12),\n        ),\n      ),\n      onPressed: onPressed,\n      child: Text(text, style: const TextStyle(fontWeight: FontWeight.bold)),\n    );\n  }\n}\n"
  }
]
